<?php

namespace ContainerXoXtqQV;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getForm_RegistryService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'form.registry' shared service.
     *
     * @return \Symfony\Component\Form\FormRegistry
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'form'.\DIRECTORY_SEPARATOR.'FormRegistryInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'form'.\DIRECTORY_SEPARATOR.'FormRegistry.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'form'.\DIRECTORY_SEPARATOR.'FormExtensionInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'form'.\DIRECTORY_SEPARATOR.'Extension'.\DIRECTORY_SEPARATOR.'DependencyInjection'.\DIRECTORY_SEPARATOR.'DependencyInjectionExtension.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'form'.\DIRECTORY_SEPARATOR.'ResolvedFormTypeFactoryInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'form'.\DIRECTORY_SEPARATOR.'Extension'.\DIRECTORY_SEPARATOR.'DataCollector'.\DIRECTORY_SEPARATOR.'Proxy'.\DIRECTORY_SEPARATOR.'ResolvedTypeFactoryDataCollectorProxy.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'form'.\DIRECTORY_SEPARATOR.'ResolvedFormTypeFactory.php';

        return $container->privates['form.registry'] = new \Symfony\Component\Form\FormRegistry([new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'App\\Form\\AssuranceType' => ['privates', 'App\\Form\\AssuranceType', 'getAssuranceTypeService', true],
            'App\\Form\\BudgetType' => ['privates', 'App\\Form\\BudgetType', 'getBudgetTypeService', true],
            'App\\Form\\CandidatType' => ['privates', 'App\\Form\\CandidatType', 'getCandidatTypeService', true],
            'App\\Form\\CertificationType' => ['privates', 'App\\Form\\CertificationType', 'getCertificationTypeService', true],
            'App\\Form\\CommandeType' => ['privates', 'App\\Form\\CommandeType', 'getCommandeTypeService', true],
            'App\\Form\\CongeType' => ['privates', 'App\\Form\\CongeType', 'getCongeTypeService', true],
            'App\\Form\\DepenseType' => ['privates', 'App\\Form\\DepenseType', 'getDepenseTypeService', true],
            'App\\Form\\EmployeeType' => ['privates', 'App\\Form\\EmployeeType', 'getEmployeeTypeService', true],
            'App\\Form\\EntretienCandidatType' => ['privates', 'App\\Form\\EntretienCandidatType', 'getEntretienCandidatTypeService', true],
            'App\\Form\\EntretienType' => ['privates', 'App\\Form\\EntretienType', 'getEntretienTypeService', true],
            'App\\Form\\FormationType' => ['privates', 'App\\Form\\FormationType', 'getFormationTypeService', true],
            'App\\Form\\FournisseurType' => ['privates', 'App\\Form\\FournisseurType', 'getFournisseurTypeService', true],
            'App\\Form\\OffreemploiType' => ['privates', 'App\\Form\\OffreemploiType', 'getOffreemploiTypeService', true],
            'App\\Form\\PresenceType' => ['privates', 'App\\Form\\PresenceType', 'getPresenceTypeService', true],
            'App\\Form\\ProduitType' => ['privates', 'App\\Form\\ProduitType', 'getProduitTypeService', true],
            'App\\Form\\RechercheAssuranceType' => ['privates', 'App\\Form\\RechercheAssuranceType', 'getRechercheAssuranceTypeService', true],
            'App\\Form\\RechercheReclamationType' => ['privates', 'App\\Form\\RechercheReclamationType', 'getRechercheReclamationTypeService', true],
            'App\\Form\\ReclamationType' => ['privates', 'App\\Form\\ReclamationType', 'getReclamationTypeService', true],
            'App\\Form\\RegistrationFormType' => ['privates', 'App\\Form\\RegistrationFormType', 'getRegistrationFormTypeService', true],
            'App\\Form\\ReponseType' => ['privates', 'App\\Form\\ReponseType', 'getReponseTypeService', true],
            'App\\Form\\RhType' => ['privates', 'App\\Form\\RhType', 'getRhTypeService', true],
            'App\\Form\\UserType' => ['privates', 'App\\Form\\UserType', 'getUserTypeService', true],
            'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => ['privates', 'form.type.entity', 'getForm_Type_EntityService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => ['privates', 'form.type.choice', 'getForm_Type_ChoiceService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType' => ['privates', 'form.type.color', 'getForm_Type_ColorService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => ['privates', 'form.type.file', 'getForm_Type_FileService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => ['privates', 'form.type.form', 'getForm_Type_FormService', true],
        ], [
            'App\\Form\\AssuranceType' => '?',
            'App\\Form\\BudgetType' => '?',
            'App\\Form\\CandidatType' => '?',
            'App\\Form\\CertificationType' => '?',
            'App\\Form\\CommandeType' => '?',
            'App\\Form\\CongeType' => '?',
            'App\\Form\\DepenseType' => '?',
            'App\\Form\\EmployeeType' => '?',
            'App\\Form\\EntretienCandidatType' => '?',
            'App\\Form\\EntretienType' => '?',
            'App\\Form\\FormationType' => '?',
            'App\\Form\\FournisseurType' => '?',
            'App\\Form\\OffreemploiType' => '?',
            'App\\Form\\PresenceType' => '?',
            'App\\Form\\ProduitType' => '?',
            'App\\Form\\RechercheAssuranceType' => '?',
            'App\\Form\\RechercheReclamationType' => '?',
            'App\\Form\\ReclamationType' => '?',
            'App\\Form\\RegistrationFormType' => '?',
            'App\\Form\\ReponseType' => '?',
            'App\\Form\\RhType' => '?',
            'App\\Form\\UserType' => '?',
            'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => '?',
        ]), ['Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.form.transformation_failure_handling'] ?? $container->load('getForm_TypeExtension_Form_TransformationFailureHandlingService'));
            yield 1 => ($container->privates['form.type_extension.form.http_foundation'] ?? $container->load('getForm_TypeExtension_Form_HttpFoundationService'));
            yield 2 => ($container->privates['form.type_extension.form.validator'] ?? $container->load('getForm_TypeExtension_Form_ValidatorService'));
            yield 3 => ($container->privates['form.type_extension.upload.validator'] ?? $container->load('getForm_TypeExtension_Upload_ValidatorService'));
            yield 4 => ($container->privates['form.type_extension.csrf'] ?? $container->load('getForm_TypeExtension_CsrfService'));
            yield 5 => ($container->privates['form.type_extension.form.data_collector'] ?? $container->load('getForm_TypeExtension_Form_DataCollectorService'));
            yield 6 => ($container->privates['form.type_extension.form.password_hasher'] ?? $container->load('getForm_TypeExtension_Form_PasswordHasherService'));
        }, 7), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.repeated.validator'] ??= new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension());
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.submit.validator'] ??= new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension());
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\PasswordType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.password.password_hasher'] ?? $container->load('getForm_TypeExtension_Password_PasswordHasherService'));
        }, 1)], new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_guesser.validator'] ?? $container->load('getForm_TypeGuesser_ValidatorService'));
            yield 1 => ($container->privates['form.type_guesser.doctrine'] ?? $container->load('getForm_TypeGuesser_DoctrineService'));
        }, 2))], new \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy(new \Symfony\Component\Form\ResolvedFormTypeFactory(), ($container->privates['data_collector.form'] ?? self::getDataCollector_FormService($container))));
    }
}
